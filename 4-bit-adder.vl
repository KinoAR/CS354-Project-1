module onebit_halfadder(A, B, S, C);
  input A, B;
  output S, C;
  wire S1, C1;
  //Sum
  xor gate1(S, A, B);
  //Carry
  and gate2(C, A, B);
endmodule

module full_adder(A, B, D, S, C);
  input A, B, D;
  output S, C; //S - Sum  & C - Carry Out
  wire w1, w2, w3;
  onebit_halfadder halfadder1(A, B, w1, w2),
                   halfadder2(w1, D, S, w3);
  or gate1(C, w2, w3);
endmodule

module _4bit_adder (A, B, C0, S, C4); //C0 - C4 all carries
  input [3:0] A, B;
  input C0;
  output [3:0] S;
  output C4;
  wire C1, C2, C3;
  full_adder fa1(A[0], B[0], C0, S[0], C1),
             fa2(A[1], B[1], C1, S[1], C2),
             fa3(A[2], B[2], C2, S[2], C3),
             fa4(A[3], B[3], C3, S[3], C4);
endmodule

module test_adder;
  reg [3:0] A, B;
  reg C0;
  wire [3:0] S;
  wire C4;
  _4bit_adder _4bitadder(A, B, C0, S, C4);
  initial
    begin
      $display("Time\tA\tB\tC0\tSum\tCarry Out");
      $display("--------------------------------------------");
            A=0; B=0; C0=0; 
        #10 A=0; B=1; C0=1; 
        #10 A=1; B=7; C0=1; 
        #10 A=-1; B=0; C0=1; 
    end

  initial
  $monitor("%4d\t%d\t%d\t%b\t%d\t%b", $time, A, B, C0, S, C4);
endmodule